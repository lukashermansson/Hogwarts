/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hogwarts.LararMeny.Elev;

import hogwarts.Util;
import oru.inf.InfDB;
import hogwarts.Validation;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import oru.inf.InfException;




/**
 * I denna del kan man ändra information om en elev samt ta bort denne.
 */
public class ElevInfoForm extends javax.swing.JFrame {
    
    private InfDB db;
    private int elevID;
    private int lararID;
    private String fornamn, efternamn;
   

    /**
     * Creates new form ElevInfoForm
     */
    public ElevInfoForm(InfDB db, int elevID, int lararID) {
        //Initialisera fälen
        this.db = db;
        this.elevID = elevID;
        this.lararID = lararID;
        
        //Generera inehåll
        initComponents();
        
        //populera listan med sovsalar och elevhem
        uppdateraElevhemsLista();
        //plocka fram det tidigare valda alternativet i listan
        uppdateraTidigareElevhem();
        
        //Aktivera knappen om andvändaren är admin
        if(Util.isAdmin(db, lararID)){
            jButtonTaBort.setEnabled(true);
        }
        
        try {
            //uppdatera information till elevens
            HashMap<String, String> res = db.fetchRow("SELECT FORNAMN, EFTERNAMN FROM ELEV WHERE ELEV_ID = " + elevID + ";");
            
            fornamn = res.get("FORNAMN");
            efternamn = res.get("EFTERNAMN");
            jLabelElevNamn.setText(fornamn + " " + efternamn);
            
            
        } catch (InfException ex) {
            //Något gick fel i sql
            System.out.println("Sql fel");
        }
        
        //Hantera fönsterstängning 
        this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        
    }
    
        //populera listan med elevhem
    private void uppdateraElevhemsLista(){
        //tömm listan på inehåll
        jComboBoxSovsal.removeAllItems();
        try {
            ArrayList<HashMap<String, String>> result = db.fetchRows("SELECT VANING, ELEVHEMSNAMN FROM SOVSAL JOIN ELEVHEM ON ELEVHEM = ELEVHEM_ID;");
            //kolla så vi har några sovsalar
            if(result != null){
                //populera listan med databasens svar
                for(HashMap<String, String> row : result){
                    jComboBoxSovsal.addItem(row.get("ELEVHEMSNAMN") + " våning: "+ row.get("VANING"));
                }
            }else{
                jLabelError1.setText("Det finns inga sovsalar");
            }
        } catch (InfException ex) {
            jLabelError1.setText("Sql fel");
        }
    }
    //välj fram tidiagre sovsalen i listan
    private void uppdateraTidigareElevhem(){
        try {
            String vaning, elevhem;
            
            HashMap<String, String> sovsal = db.fetchRow("SELECT VANING, ELEVHEMSNAMN FROM SOVSAL JOIN ELEVHEM ON ELEVHEM = ELEVHEM_ID JOIN ELEV on SOVSAL = SOVSAL_ID WHERE ELEV_ID = " + elevID + ";");
            
            //kolla så vi har en sovsal registerad
            if(sovsal != null){
                String item;
                //loopa hela listan 
                for (int i = 0; i < jComboBoxSovsal.getItemCount(); i++){
                    item = jComboBoxSovsal.getItemAt(i);
                    //kolla om nuvarande listelement är det vi söker
                    if (item.equals(sovsal.get("ELEVHEMSNAMN") + " våning: "+ sovsal.get("VANING"))){
                        //uppdatera valt alternativ
                        jComboBoxSovsal.setSelectedIndex(i);
                        break;
                    }
                }
            }
            
        } catch (InfException ex) {
            jLabelError1.setText("Sql  fel: " + ex.getMessage());
        }
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelFornamn = new javax.swing.JLabel();
        jTextFornamn = new javax.swing.JTextField();
        jLabelEfternamn = new javax.swing.JLabel();
        jTextEfternamn = new javax.swing.JTextField();
        jButtonValj = new javax.swing.JButton();
        jComboBoxSovsal = new javax.swing.JComboBox<>();
        jLabelSovsal = new javax.swing.JLabel();
        jLabelElevInfo = new javax.swing.JLabel();
        jLabelElevNamn = new javax.swing.JLabel();
        jLabelError1 = new javax.swing.JLabel();
        jLabelError2 = new javax.swing.JLabel();
        jLabelError3 = new javax.swing.JLabel();
        jButtonTaBort = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabelFornamn.setText("Nytt Förnamn:");

        jLabelEfternamn.setText("Nytt Efternamn:");

        jButtonValj.setText("Ändra");
        jButtonValj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonValjActionPerformed(evt);
            }
        });

        jComboBoxSovsal.setModel(new javax.swing.DefaultComboBoxModel<>());

        jLabelSovsal.setText("Sovsal:");

        jLabelElevInfo.setText("Vald elev:");

        jLabelElevNamn.setText("Elevens namn");

        jLabelError1.setText("   ");

        jLabelError2.setText("                                  ");

        jLabelError3.setText("                       ");

        jButtonTaBort.setText("Ta bort elev");
        jButtonTaBort.setEnabled(false);
        jButtonTaBort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTaBortActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonValj)
                                .addGap(34, 34, 34)
                                .addComponent(jButtonTaBort))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelSovsal)
                                .addGap(26, 26, 26)
                                .addComponent(jComboBoxSovsal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelFornamn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextFornamn, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelEfternamn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextEfternamn, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jLabelElevInfo)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelElevNamn))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabelError2))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabelError3))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabelError1, javax.swing.GroupLayout.PREFERRED_SIZE, 517, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(165, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelElevInfo)
                    .addComponent(jLabelElevNamn))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelFornamn)
                    .addComponent(jTextFornamn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelEfternamn)
                    .addComponent(jTextEfternamn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxSovsal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSovsal))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonValj)
                    .addComponent(jButtonTaBort))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelError2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelError3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelError1)
                .addContainerGap(90, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //knappen ändra är klickad
    private void jButtonValjActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonValjActionPerformed
        // TODO add your handling code here:
        
        String fornamnButton = jTextFornamn.getText();
        String efternamnButton = jTextEfternamn.getText();
        //Kolla så att ett förnamn är inskrivet
        if (!Validation.textComponentEmpty(jTextFornamn)) {
            if(Validation.isValidName(fornamnButton)){
                try {
                    //uppdatera förnamnet på eleven
                    db.update("UPDATE ELEV SET FORNAMN = '" + fornamnButton + "' WHERE ELEV_ID = '" + elevID + "';");        
                    jLabelError2.setText("Förnamn ändrat till " + fornamnButton);
                }catch (InfException ex) {
                    jLabelError1.setText("Ett SQL fel har inträffat");
                }
            }else{
                jLabelError2.setText("Förnamnet får ej inehålla mellanrumm eller siffror");
            }
        }else{
            //andvändaren skrev ej in ett förnamn
            jLabelError2.setText("");
        }
        //Kolla så att ett efternman är inskrivet     
        if(!Validation.textComponentEmpty(jTextEfternamn)){
            if(Validation.isValidName(efternamnButton)){
                try {
                    db.update("UPDATE ELEV SET EFTERNAMN = '" + efternamnButton + "' WHERE ELEV_ID = '" + elevID + "';");
                    jLabelError3.setText("Efternamn ändrat till " + efternamnButton);
                }catch (InfException ex) {
                    jLabelError1.setText("Ett SQL fel har inträffat");
                }
            }else{
                jLabelError3.setText("Efternamnet får ej inehålla mellanrumm eller siffror");
            }   
        }else{
            //andvändaren skrev ej in ett efternamn
            jLabelError3.setText("");
        }
        //plocka framm ett sovsals id från listan
        int sovsal = -1;
        String elevhemsnamn = jComboBoxSovsal.getSelectedItem().toString().split(" ")[0];
        String vaning = jComboBoxSovsal.getSelectedItem().toString().split(" ")[2];
        try {
            sovsal = Integer.parseInt(db.fetchSingle("SELECT SOVSAL_ID from SOVSAL JOIN ELEVHEM ON ELEVHEM = ELEVHEM_ID WHERE ELEVHEMSNAMN = '" + elevhemsnamn +"' And VANING = " + vaning +";"));
        } catch (InfException ex) {
            jLabelError1.setText("Ett SQL Fel har inträffat");
        }
        //Kolla så vi hittade ett sovsals ID
        if(sovsal != -1){
            try {
                //sovsalen finns, lägg in eleven
                db.update("UPDATE ELEV SET SOVSAL = '"+ sovsal +"' WHERE ELEV_ID = '" + elevID + "';");
                jLabelError1.setText("Uppdaterade sovsal till " + sovsal);
            } catch (InfException ex) {
                jLabelError1.setText("Ett fel har skett");
            }
        }else{
            //hittar inte sovsalen
            jLabelError1.setText("Den sovsalen som du valt är borttagen");
        }
    }//GEN-LAST:event_jButtonValjActionPerformed

    //Hantera fönsterstängning
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        
        this.setVisible(false);
        this.dispose();
        
    }//GEN-LAST:event_formWindowClosing
    
    //Ta bort knappen (Bara klickbar om användaren är adminstratör).
    private void jButtonTaBortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTaBortActionPerformed
        try {
            int antalPrefektPositioner = Integer.parseInt(db.fetchSingle("SELECT COUNT(*) FROM ELEVHEM WHERE PREFEKT = " + elevID + ";"));
            
            //kolla om eleven har någon prefektposition
            if(antalPrefektPositioner == 0){
                //Ta bort all relevant information om en elev
                db.delete("DELETE FROM REGISTRERAD_PA WHERE ELEV_ID = " + elevID + ";");
                db.delete("DELETE FROM HAR_BETYG_I WHERE ELEV_ID = " + elevID + ";");
                db.delete("DELETE FROM ELEV WHERE ELEV_ID = " + elevID + ";");
                
                //Ta bort rutan
                this.setVisible(false);
                this.dispose();
                //Berätta för andvändaren
                JOptionPane.showMessageDialog(null, "Andvändaren togs bort!");
            }else{
                //Kan ej ta bort för eleven är prefekt
                JOptionPane.showMessageDialog(null, "Eleven är prefekt för något elevhem!");
            }
        } catch (InfException ex) {
            System.out.println("SQL fel");
        }
    }//GEN-LAST:event_jButtonTaBortActionPerformed

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonTaBort;
    private javax.swing.JButton jButtonValj;
    private javax.swing.JComboBox<String> jComboBoxSovsal;
    private javax.swing.JLabel jLabelEfternamn;
    private javax.swing.JLabel jLabelElevInfo;
    private javax.swing.JLabel jLabelElevNamn;
    private javax.swing.JLabel jLabelError1;
    private javax.swing.JLabel jLabelError2;
    private javax.swing.JLabel jLabelError3;
    private javax.swing.JLabel jLabelFornamn;
    private javax.swing.JLabel jLabelSovsal;
    private javax.swing.JTextField jTextEfternamn;
    private javax.swing.JTextField jTextFornamn;
    // End of variables declaration//GEN-END:variables
}
