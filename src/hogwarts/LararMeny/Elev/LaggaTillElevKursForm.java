/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hogwarts.LararMeny.Elev;

import java.util.ArrayList;
import javax.swing.JFrame;
import oru.inf.InfDB;
import oru.inf.InfException;

/**
 * Här väljer du kurs samt betyg för den elev du valde innan.
 */
public class LaggaTillElevKursForm extends javax.swing.JFrame {
    private int elevID;
    private InfDB db;
    
    private String ingetBetyg = "-- Inget betyg --";
    private String ejRegistrerad = "-- Ej registrerad --";
    /**
     * Creates new form LaggaTillElevKursForm
     */
    public LaggaTillElevKursForm(InfDB db, int elevID) {
        //initialisera fälten
        this.elevID = elevID;
        this.db = db;
        
        initComponents();
        
        //populera listor
        uppdateraKurser();
        uppdateraBetyg();
        
       
        
        this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        //uppdatera listans element 
        uppdateraValtBetyg(1);
    }
    
    //populera kurslistan
    private void uppdateraKurser(){
        //Töm listan
        jComboBoxKurs.removeAllItems();
        try {
            ArrayList<String> kurser = db.fetchColumn("SELECT KURSNAMN FROM KURS;");
            if(kurser != null){
                //lägg till alla kurser ifrån databasen till listan
                for(String kurs : kurser){
                    jComboBoxKurs.addItem(kurs);
                }
            }else{
                jLabelError.setText("Det finns inga kurser");
            }
        } catch (InfException ex) {
            jLabelError.setText("SQL fel");
        }
        
    }
    
    //Populera betyglistan
    private void uppdateraBetyg(){
        //töm listan
        jComboBoxBetyg.removeAllItems();
        try {
            ArrayList<String> betyg = db.fetchColumn("SELECT BETYGSBETECKNING FROM BETYG;");
            
            if(betyg != null){
                //lägg till två extra alternativ
                jComboBoxBetyg.addItem(ejRegistrerad);
                jComboBoxBetyg.addItem(ingetBetyg);
                //lägg till alla betyg ifrån databasen till listan
                for(String ettBetyg : betyg){
                    jComboBoxBetyg.addItem(ettBetyg);
                }
            }else{
                jLabelError.setText("det finns inga betyg");
            }
        } catch (InfException ex) {
            jLabelError.setText("SQL Fel");
        }
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBoxKurs = new javax.swing.JComboBox<>();
        jLabelKurs = new javax.swing.JLabel();
        jComboBoxBetyg = new javax.swing.JComboBox<>();
        jLabelbetyg = new javax.swing.JLabel();
        jButtonRegistrera = new javax.swing.JButton();
        jLabelError = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jComboBoxKurs.setModel(new javax.swing.DefaultComboBoxModel<>());
        jComboBoxKurs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxKursActionPerformed(evt);
            }
        });

        jLabelKurs.setText("Kurs");

        jComboBoxBetyg.setModel(new javax.swing.DefaultComboBoxModel<>());

        jLabelbetyg.setText("Betyg");

        jButtonRegistrera.setText("Registrera");
        jButtonRegistrera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRegistreraActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelKurs)
                            .addComponent(jComboBoxKurs, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelbetyg)
                            .addComponent(jComboBoxBetyg, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jButtonRegistrera)
                    .addComponent(jLabelError))
                .addContainerGap(146, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelKurs)
                    .addComponent(jLabelbetyg))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxKurs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxBetyg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButtonRegistrera)
                .addGap(69, 69, 69)
                .addComponent(jLabelError)
                .addContainerGap(136, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    //Nytt alternativ valt i listan
    private void jComboBoxKursActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxKursActionPerformed
        String itemText = jComboBoxKurs.getSelectedItem().toString();
        
        try {
            //plocka fram det tidigare betyget
           
            String res = db.fetchSingle("SELECT KURS_ID FROM KURS WHERE KURSNAMN = '" + itemText + "';");
            if(res != null){
                uppdateraValtBetyg(Integer.parseInt(res));
            }else{
                jLabelError.setText("Kursen finns ej längre");
            }
            
        } catch (InfException ex) {
            jLabelError.setText("SQL Fel");
        }
        
        
    }//GEN-LAST:event_jComboBoxKursActionPerformed

    //registrera knappen tryckt
    private void jButtonRegistreraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRegistreraActionPerformed
        
        try {
            //plocka fram kursid
            String kursID = db.fetchSingle("SELECT KURS_ID FROM KURS WHERE KURSNAMN = '" + jComboBoxKurs.getSelectedItem().toString() + "';");
            if(kursID != null){
                //ta bort tidigare data
                db.delete("DELETE FROM HAR_BETYG_I WHERE ELEV_ID = "+ elevID + " AND KURS_ID = "+ kursID + ";");
                db.delete("DELETE FROM REGISTRERAD_PA WHERE ELEV_ID = "+ elevID + " AND KURS_ID = " + kursID +  ";");
                
                //kolla om andvändaren vill avregistrea andvändaren
                if(!jComboBoxBetyg.getSelectedItem().toString().equals(ejRegistrerad)){
                    //Kolla om andvändaren vill ändra till tommt betyg eller ej
                    if(!jComboBoxBetyg.getSelectedItem().toString().equals(ingetBetyg)){
                        //uppdatera betyg
                        db.insert("INSERT INTO HAR_BETYG_I (ELEV_ID, KURS_ID, KURSBETYG) VALUES (" + elevID + ", " + kursID + ", '" + jComboBoxBetyg.getSelectedItem().toString() + "');");
                        jLabelError.setText("Uppdaterade betyg på kursen för eleven");
                    }else{
                        //registrera utan betyg
                        db.insert("INSERT INTO REGISTRERAD_PA (ELEV_ID, KURS_ID) VALUES ("+ elevID + ", " + kursID + ");");
                        jLabelError.setText("Registrerade en elev på kursen");
                    }
                }else{
                    //skriv ut att vi tog bort eleven
                    jLabelError.setText("Tog bort en elev från kursen");
                }
            }else{
                //sql frågan är null vi fick alså inget svar
                jLabelError.setText("Kursen existerar inte längre");
            }
        } catch (InfException ex) {
            jLabelError.setText("SQL fel");
        }
    }//GEN-LAST:event_jButtonRegistreraActionPerformed
    //hantera fönsterstängning
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

        this.setVisible(false);
        this.dispose();
        
    }//GEN-LAST:event_formWindowClosing
    //uppdatera valt alternativ i betygrutan
    private void uppdateraValtBetyg(int kursID){
        if(jComboBoxBetyg.getItemCount() >= 1){
            jComboBoxBetyg.setSelectedIndex(0);
            try {
                //Kolla om eleven är registerad på kursen
                int antalreg = Integer.parseInt(db.fetchSingle("SELECT COUNT(*) FROM REGISTRERAD_PA WHERE ELEV_ID = " + elevID + " AND KURS_ID = "+ kursID +";"));
                if(antalreg != 0){
                    //välj "inget betyg" i listan
                    jComboBoxBetyg.setSelectedIndex(1);
                }
            
                //plocka fram betyg
                String betyg = db.fetchSingle("SELECT KURSBETYG FROM HAR_BETYG_I WHERE ELEV_ID = " + elevID + " AND KURS_ID = "+ kursID +";");
                if(betyg != null){
                    //ett betyg finns
                    String item;
                    //välj betyget i listan
                    for (int i = 0; i < jComboBoxBetyg.getItemCount(); i++){
                        item = jComboBoxBetyg.getItemAt(i);
                        if(item.equals(betyg)){
                            jComboBoxBetyg.setSelectedIndex(i);
                        }
                    }
                }
                
            
            } catch (InfException ex) {
                jLabelError.setText("Sql fel");
            }
        }
    }
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonRegistrera;
    private javax.swing.JComboBox<String> jComboBoxBetyg;
    private javax.swing.JComboBox<String> jComboBoxKurs;
    private javax.swing.JLabel jLabelError;
    private javax.swing.JLabel jLabelKurs;
    private javax.swing.JLabel jLabelbetyg;
    // End of variables declaration//GEN-END:variables
}
